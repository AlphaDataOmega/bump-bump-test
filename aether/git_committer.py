"""Commit mutation files generated by AETHER.

This utility reads ``mutation_log.json`` inside a mutation directory and
commits the corresponding mutated files into a Git repository.  Each entry in
``mutation_log.json`` should at minimum contain a ``filename`` field pointing to
an updated file relative to the project root.  Additional metadata such as
``summary``, ``risk_score``, ``confidence`` and ``strategy`` are incorporated
into the commit message when present.
"""

from __future__ import annotations

import json
import shutil
import subprocess
from pathlib import Path
from typing import Iterable, Dict, Any, List, Optional


def _load_log(path: Path) -> Iterable[Dict[str, Any]]:
    """Return iterable log entries from ``path`` if it exists."""
    if not path.exists():
        return []
    with path.open("r", encoding="utf-8") as fh:
        data = json.load(fh)
    if isinstance(data, dict):
        return data.values()
    return data


def commit_mutations(
    mutation_dir: Path,
    *,
    repo_root: Optional[Path] = None,
    branch_name: Optional[str] = None,
) -> List[str]:
    """Commit mutated files under ``mutation_dir`` to a Git repository.

    Parameters
    ----------
    mutation_dir:
        Directory containing rewritten files and ``mutation_log.json``.
    repo_root:
        Path to the repository root.  If ``None`` the current working
        directory is assumed.
    branch_name:
        Optional name of a branch to create before committing.

    Returns
    -------
    List[str]
        List of filenames that were committed.
    """
    repo_root = repo_root or Path.cwd()
    log_entries = _load_log(mutation_dir / "mutation_log.json")
    committed: List[str] = []

    git_base = ["git", "-C", str(repo_root)]

    if branch_name:
        subprocess.run(git_base + ["switch", "-c", branch_name], check=True)

    for entry in log_entries:
        filename = entry.get("filename")
        if not filename:
            continue
        src = mutation_dir / filename
        if not src.exists():
            continue
        dst = repo_root / filename
        dst.parent.mkdir(parents=True, exist_ok=True)
        shutil.copy2(src, dst)
        subprocess.run(git_base + ["add", str(dst.relative_to(repo_root))], check=True)

        summary = entry.get("summary") or entry.get("message") or f"Update {filename}"
        lines = [f"[AETHER] {summary}"]
        extras = []
        risk = entry.get("risk_score")
        if risk is not None:
            extras.append(f"Risk Score: {risk}")
        confidence = entry.get("confidence")
        if confidence:
            extras.append(f"Confidence: {confidence}")
        strategy = entry.get("strategy")
        if strategy:
            extras.append(f"Strategy: {strategy}")
        if extras:
            lines.append("\n".join(extras))
        subprocess.run(git_base + ["commit", "-m", "\n".join(lines)], check=True)
        committed.append(filename)

    return committed


__all__ = ["commit_mutations"]
