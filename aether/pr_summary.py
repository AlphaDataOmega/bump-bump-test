"""Render a pull request summary for AETHER mutations.

The summary is derived from ``mutation_log.json`` produced by earlier phases
and lists all mutated files with associated metadata.  The resulting markdown is
written to ``pull_request_summary.md`` in the mutation directory unless an
explicit output path is provided.
"""

from __future__ import annotations

import json
from pathlib import Path
from typing import Iterable, Dict, Any, Optional


def _load_log(path: Path) -> Iterable[Dict[str, Any]]:
    """Return iterable log entries from ``path``."""
    if not path.exists():
        return []
    with path.open("r", encoding="utf-8") as fh:
        data = json.load(fh)
    if isinstance(data, dict):
        return data.values()
    return data


def generate_summary(
    log_path: Path,
    *,
    output_path: Optional[Path] = None,
) -> Path:
    """Generate a markdown pull request summary from ``log_path``.

    Parameters
    ----------
    log_path:
        Path to ``mutation_log.json``.
    output_path:
        Optional location of the resulting summary file.  Defaults to
        ``pull_request_summary.md`` within the mutation directory.

    Returns
    -------
    Path
        Path to the written summary file.
    """
    entries = _load_log(log_path)
    lines = [
        "### AETHER Pull Request Summary",
        "This PR proposes autonomous refactors generated by AETHER.",
        "",
        "**Changes**:",
    ]

    for entry in entries:
        filename = entry.get("filename", "unknown")
        summary = entry.get("summary") or entry.get("message") or "Updated file"
        confidence = entry.get("confidence")
        risk = entry.get("risk_score")
        details = []
        if confidence:
            details.append(f"Confidence: {confidence}")
        if risk is not None:
            details.append(f"Risk Score: {risk}")
        line = f"- `{filename}`: {summary}"
        if details:
            line += " (" + ", ".join(details) + ")"
        lines.append(line)
        strategy = entry.get("strategy")
        if strategy:
            lines.append(f"  - Strategy: {strategy}")
        diff_path = log_path.parent / (Path(filename).name + ".diff.md")
        if diff_path.exists():
            lines.append(f"  - Diff: {diff_path}")

    out = output_path or (log_path.parent / "pull_request_summary.md")
    with out.open("w", encoding="utf-8") as fh:
        fh.write("\n".join(lines) + "\n")
    return out


__all__ = ["generate_summary"]
