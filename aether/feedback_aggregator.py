"""Track reinforcement trajectory across runs.

This module aggregates per-file reinforcement feedback over multiple runs
and stores the cumulative trajectory.  It works with JSON files generated by
other AETHER components and produces a ``trajectory.json`` summary that can be
used to analyse longâ€‘term trends.
"""

from __future__ import annotations

import json
from pathlib import Path
from typing import Any, Dict, List


def load_json(path: Path) -> Any:
    """Return parsed JSON data from ``path`` if it exists.

    Parameters
    ----------
    path:
        Location of the JSON file.

    Returns
    -------
    Any
        Parsed JSON content or an empty ``dict`` if the file is missing.
    """
    if not path.exists():
        return {}
    with path.open("r", encoding="utf-8") as f:
        return json.load(f)


def update_trajectory(
    feedback: List[Dict[str, Any]],
    prev_trajectory: Dict[str, Any],
    run_id: int,
) -> Dict[str, Any]:
    """Merge ``feedback`` into ``prev_trajectory`` for ``run_id``.

    Parameters
    ----------
    feedback:
        A list of feedback entries with ``filename``, ``change`` and
        ``reinforcement`` fields.
    prev_trajectory:
        Existing trajectory information.
    run_id:
        Numeric identifier for the current run.

    Returns
    -------
    Dict[str, Any]
        Updated trajectory mapping file names to reinforcement history.
    """
    trajectory = prev_trajectory.copy()

    if not isinstance(feedback, list):
        return trajectory

    for entry in feedback:
        fname = entry.get("filename")
        if not fname:
            continue
        delta = entry.get("reinforcement", 0)
        change = entry.get("change")

        if fname not in trajectory:
            trajectory[fname] = {"total_reinforcement": 0, "history": []}

        trajectory[fname]["total_reinforcement"] += delta
        trajectory[fname]["last_change"] = change
        trajectory[fname]["history"].append(
            {"run": run_id, "change": change, "reinforcement": delta}
        )

    return trajectory


def save_trajectory(trajectory: Dict[str, Any], path: Path) -> None:
    """Write ``trajectory`` data to ``path`` as JSON."""
    path.parent.mkdir(parents=True, exist_ok=True)
    with path.open("w", encoding="utf-8") as f:
        json.dump(trajectory, f, indent=2)


__all__ = ["load_json", "update_trajectory", "save_trajectory"]
